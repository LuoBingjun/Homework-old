                      | # 骆炳君 软件71 2017013573
                      | 
  0x000:              | .pos 0
  0x000: 30f400020000 | irmovl Stack,%esp
  0x006: 2045         | rrmovl %esp,%ebp
  0x008: 30f218000000 | irmovl ele1,%edx
  0x00e: a02f         | pushl %edx
  0x010: 8030000000   | call sum_list
  0x015: 00           | halt
                      | 
                      | # Sample linked list
  0x018:              | .align 4
  0x018:              | ele1:
  0x018: 0a000000     | 	.long 0x00a
  0x01c: 20000000     | 	.long ele2
  0x020:              | ele2:
  0x020: b0000000     | 	.long 0x0b0
  0x024: 28000000     | 	.long ele3
  0x028:              | ele3:
  0x028: 000c0000     | 	.long 0xc00
  0x02c: 00000000     | 	.long 0
                      | 
  0x030:              | sum_list:
  0x030: a05f         | 	pushl %ebp				# set stack pointer
  0x032: 2045         | 	rrmovl %esp, %ebp
  0x034: 502508000000 | 	mrmovl 8(%ebp), %edx	# get ls(%edx)
  0x03a: 30f000000000 | 	irmovl $0, %eax		    # set val(%eax) = 0
  0x040: 6222         | 	andl %edx, %edx		    # ls == 0 ?
  0x042: 735c000000   | 	je L4			        # enter loop when ls != 0
  0x047:              | L3:				            # loop:
  0x047: 501200000000 | 	mrmovl (%edx), %ecx		# get ls->val
  0x04d: 6010         | 	addl %ecx, %eax		    # val += ls->val
  0x04f: 502204000000 | 	mrmovl 4(%edx), %edx	# ls = ls->next 
  0x055: 6222         | 	andl %edx, %edx		    # ls == 0?
  0x057: 7447000000   | 	jne L3					# exit loop when ls == 0
  0x05c:              | L4:			            	# exit:
  0x05c: 2054         | 	rrmovl %ebp, %esp	    # restore stack pointer
  0x05e: b05f         | 	popl %ebp
  0x060: 90           | 	ret
                      | 
  0x200:              | .pos 0x200
  0x200:              | Stack:
